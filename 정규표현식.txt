표현식
    ^x 문자열의 시작을 표현하며 x 문자로 시작됨을 의미한다.
    x$ 문자열의 종료를 표현하며 x 문자로 종료됨을 의미
    .x 임의의 한 문자의 자리수를 표현하며 문자열이 x 로 끝난다는 것을 의미
    x+ 반복을 표현하며 x 문자가 한번 이상 반복됨을 의미
    x? 존재여부를 표현하며 x 문자가 존재할 수도, 존재하지 않을 수도 있음을 의미
    x* 반복여부를 표현하며 x 문자가 0번 또는 그 이상 반복됨을 의미
    x|y or 를 표현하며 x 또는 y 문자가 존재함을 의미
    (x)그룹을 표현하며 x 를 그룹으로 처리함을 의미
    (x)(y)그룹들의 집합을 표현하며 앞에서 부터 순서대로 번호를 부여하여 관리하고 x, y 는 각 그룹의 데이터로 관리된다.
    x)(?:y)그룹들의 집합에 대한 예외를 표현하며 그룹 집합으로 관리되지 않음을 의미
    x{n} 반복을 표현하며 x 문자가 n번 반복됨을 의미
    x{n,} 반복을 표현하며 x 문자가 n번 이상 반복됨을 의미
    x{n,m} 반복을 표현하며 x 문자가 최소 n번 이상 최대 m 번 이하로 반복됨을 의미한다.
    [xy] 문자 선택을 표현하며 x 와 y 중에 하나를 의미
    [^xy] not 을 표현하며  x 및 y 를 제외한 문자를 의미
    [x-z]range를 표현하며 x ~ z 사이의 문자를 의미
    \^ escape 를 표현하며 ^ 를 문자로 사용함을 의미
    \b  word boundary를 표현하며 문자와 공백사이의 문자를 의미
    \B  non word boundary를 표현하며 문자와 공백사이가 아닌 문자를 의미
    \d  digit 를 표현하며 숫자를 의미
    \D  non digit 를 표현하며 숫자가 아닌 것을 의미
    \s  space 를 표현하며 공백 문자를 의미
    \S  non space를 표현하며 공백 문자가 아닌 것을 의미
    \t  tab 을 표현하며 탭 문자를 의미
    \v  vertical tab을 표현하며 수직 탭(?) 문자를 의미
    \w  word 를 표현하며 알파벳 + 숫자 + _ 중의 한 문자임을 의미
    \W  non word를 표현하며 알파벳 + 숫자 + _ 가 아닌 문자를 의미
    g Global 의 표현하며 대상 문자열내에 모든 패턴들을 검색하는 것을 의미
    i Ignore case 를 표현하며 대상 문자열에 대해서 대/소문자를 식별하지 않는 것을 의미한다.
    m Multi line을 표현하며 대상 문자열이 다중 라인의 문자열인 경우에도 검색하는 것을 의미
기본메타문자
    | OR 왼쪽 문자(혹은 패턴) 혹은 오른쪽 문자(혹은 패턴)과 일치
    [] 문자 집합 구성원 중 하나와 일치 ex) [abc] : a 혹은 b 혹은 c
    [^]  문자 집합 구성원을 제외하고 일치, [^abc] : a, b, c 제외한 모든 문자
    - 범위 정의 ([A-Z]와 같은 형태로 대문자 A에서 Z사이의 문자를 의미)
    \ 다음에 오는 문자를 이스케이프
    \s : 공백문자
    \b : 영문자와 공백 사이를 의미한다.
    \d : 숫자 [0-9]와 같다.
    \t : 탭문자
    \w : 단어 영문자+숫자+_(밑줄) [0-9a-zA-Z_]
    문자 이스케이프는 대문자로 적으면 반대를 의미한다
    ^ : 문자열의 시작
    $ : 문자열의 종료. 옵션에 따라 문장의 끝 또는 문서의 끝에 매치된다.
    . : 임의의 한 문자
    []: 문자 클래스. 문자 클래스 안에 들어가 있는 문자는 그 바깥에서 하나의 문자로 취급된다.
    ^ : 문자 클래스 내에서 ^는 not
    - : ex) a-z는 a에서 z까지의 문자
    ? : 앞 문자가 없거나 하나 있음
수량자
    + : 앞 문자가 하나 이상임
    * : 앞 문자가 0개 이상임
    {n,m} : 앞 문자가 n개 이상 m개 이하. {0,1} 은 ?와 같은 의미다.
    {n,} : 앞 문자가 n개 이상. 위의 형태에서 m이 생략된 형태이다. {0,} 이면 *와 같고 {1,} 이면 +와 같은 의미이다.
    {n} : 앞 문자가 정확히 n개. {n,n} 과 같은 의미이다.
    () : 하나의 패턴구분자 안에 서브 패턴을 지정해서 사용할 경우 괄호로 묶어주는 방식을 사용한다.
    * 앞의 문자나 부분식이 0개 이상 탐욕적으로 찾기
    *? 탐욕적 수량자 *를 게으른(lazy) 수량자로 바꿔 찾기
    ? 앞의 문자나 부분식을 0개나 1개 찾기
    {n} 앞의 문자나 부분식이 정확히 n번 일치하는 경우 찾기
    {m,n} 앞의 문자나 부분식이 m번에서 n번 일치하는 경우 찾기
    {n,} 앞의 문자나 부분식이 n번 이상인 경우를 탐욕적으로 찾기
    {n,}?  탐욕적 수량자 {n,}를 게으른(lazy) 수량자로 바꿔 찾기
        *는 없는 경우가 포함되고
        +는 무조건 하나는 있어야 한다는 의미다.
위치지정
    ^ 입력 문자열의 시작에서 그 다음 나오는 문자나 부분식과 일치하는지 검사
    \A 어떤 정규식에서는 ^의 역할을 함
    $ 문자열의 끝과 일치
    \Z 어떤 정규식에서는 $의 역할을 함
    \b 단어 경계(단어와 공백 사이의 위치)와 일치 예)
        'st\b'는 "test"의 st는 찾지만, "tester"의 st는 찾지 않음
        * test test에서 test 사이의 빈공간인 space와는 다른 의미
    \B \b와 반대(비단어 경계)로 일치. 즉 "\b"의 예제의 반대 결과가 나옴
특수한 문자
    [\b] 역스페이스
    \cx x로 표시된 제어문자 찾기. x는 [A-Za-z] 이어야 함. 아니면 c는 리터럴 'c'로 간주 예) \cM = Contorl-M 이나 캐리지 리턴 문자
    \d 모든 숫자와 일치. [0-9]와 동일
    \D \d와 반대. [^0-9]와 동일
    \f 용지 공급 문자 찾기. 페이지 넘기기(formfeed) = \x0a, \cL
    \n 줄 바꿈 문자 찾기. \x0a, \cJ
    \r 캐리지 리턴. \x0d, \cM
    \s 공백, 택, 용지 공급 등과 같은 문자 찾기. [\f\n\r\t\v]
    \S \s와 반대로 일치. [^\f\n\r\t\v]
    \t 탭 문자 찾기. \x09, \cI
    \v 세로 탭 문자 찾기. \x0b, \cK
    \w 영숫자 문자나 밑줄과 일치. [a-zA-Z0-9_]
    \W \w와 반대로 일치. [^a-zA-Z0-9_]
    \xn n으로 표시된 16진수 이스케이프 값과 일치. 16진수는 정확히 2자리여야 함
대소문자 변환
    \E  \L 혹은 \U 변환을 끝냄
    \I  다음에 오는 글자를 소문자로 변환
    \L  \E를 만날 때까지 모든 문자를 소문자로 변환
    \u  다음에 오는 글자를 대문자로 변환
    \U  \E를 만날 때까지 모든 문자를 대문자로 변환
기타
    \숫자  하위표현식이 찾은 내용을 다시 참조함
    (?=) 긍정형 전방탐색, 지정한 조건앞에 있는 문자를 검색함
    (?<=) 긍정형 후방탐색, 지정한 조건뒤에 문자 검색
    (?!) 부정형 전방탐색, 지정한 조건이 안나오는 앞에 문자 검색
    (?<!) 부정형 후방탐색

옵션
    i ignore case, 대소문자를 무시하여 찾음. 굳이 [a-zA-Z]라고 할 필요가 없음
    g global, 찾는 패턴을 하나만 찾지 말고 계속 해서 찾음. 탐욕적 수량자처럼 일치하는 구간을 늘리는 것이 아니라 일치하는 패턴의 개수가 늘어남
    m  multiline, 다중행 모드라고도 하며 라인 별로 처리하는 것이 아니라 입력 문자열에 줄바꿈이 있어도 이를 특수문자로 변환하여 하나로 봄. 가장 큰 차이를 경험할 수 있는 기능은 ^와 $임.
우선순위
    \ 이스케이프
    (), (?:), (?=), [] 괄호와 대괄호
    *, +, ?, {n}, {n,}, {n,m} 수량자
    ^, $, \anymetacharacter 앵커와 시퀀스
    | 교체
자주쓰는 정규표현식
    abc     abc 가 있는 것
    ^abc    abc 로 시작하는 것
    abc$    abc 로 끝나는 것
    ^abc$   ^abc$ abc 로 시작하고 끝나는 것
    [abc]   a,b,c 전부 중 하나를 포함한 경우
    [a-z]   a 에서 z 중 하나를 포함한 경우
    ^[0-9]  숫자 0~9 중 하나로 시작하는 패턴을 찾는 것
    [^0-9]  숫자가 들어있지 않는 패턴을 찾는 것
    ^[^0-9]     숫자가 들어있지 않은 문자로 시작하는 패턴을 찾는 것
    a{3}    a 의 3번 반복인 aaa 인 것
    a{3,}   a 가 3번이상 반복인 것
    [0-9]{2}    두 자리 숫자
    abc[7-9]{2}     abc 를 포함하고 7~9까지 숫자 중 2자리가 포함하는 것
    ^[0-9]*$ : 숫자
    ^[a-zA-Z]*$ : 영문자. 패턴변경자를 써서 /^[a-z]*$/i 같이 쓸 수 있다.
    ^[가-힣]*$ : 현대 한글(유니코드를 지원하는 정규식 엔진에 한정)
    ^[ㄱ-ㅣ가-힣]*$ : 한글 자모 낱자를 포함한 모든 현대 한글
    ^[a-zA-Z0-9]*$ : 영문과 숫자
    이메일  "/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/"
    집전화번호  "/^(070|02|031|032|033|041|042|043|051|052|053|054|055|061|062|063|064)-\d{3,4}-\d{4}$/u"
    휴대폰번호  "/^(010|011|016|017|018|019)-\d{3,4}-\d{4}$/u"
    우편번호    "/^\d{3}-?\d{3}$/u"
    아이디  "/^[a-zA-Z]\w{2,7}$/u"
    주민등록번호    "/^\d{2}[0-1]\d[0-3]\d-?[1-6]\d{6}$/u"
    숫자만 : ^[0-9]*$
    영문자만 : ^[a-zA-Z]*$
    한글만 : ^[가-힣]*$
    영어 & 숫자만 : ^[a-zA-Z0-9]*$
    E-Mail : ^[a-zA-Z0-9]+@[a-zA-Z0-9]+$
    휴대폰 :
        ^01(?:0|1|[6-9]) - (?:\d{3}|\d{4}) - \d{4}$
        ^01([0|1|6|7|8|9]?) - ?([0-9]{3,4})-?([0-9]{4})$
    일반전화 : ^\d{2,3} - \d{3,4} - \d{4}$
    주민등록번호 : \d{6} \- [1-4]\d{6}
    IP 주소 : ([0-9]{1,3}) \. ([0-9]{1,3}) \. ([0-9]{1,3}) \. ([0-9]{1,3})
관련사이트
    참고사이트
        https://myeonguni.tistory.com/1555
        https://marketplace.visualstudio.com/items?itemName=janjoerke.align-by-regex
    테스트/강의
        https://regexone.com/
        https://regexr.com/
        https://regex101.com/
        http://zvon.org/comp/r/tut-Regexp.html#Pages~Contents
    검사/시각화.
        https://regexper.com
        https://www.debuggex.com/
Lib
    . : 모든단어
    * : 0개 또는 1개 이상
    + : 1개 이상                                                                                                                                                                                                                                                                                                                                                                               
    [가-힣] : 한글선택
    ~k|[\x{F900}-\X{FAFF}] : 한자선택
    [\l\u] or [a-zA-Z] : 영어선택
    \d or \d+ : 숫자선택
        \d{3} : 3자리 숫자
        \d(3,5) : 3~5자리 숫자
    \(.+?\) : 괄호안의 숫자(괄호포함)
    (?<=\(),.+?(?=\)) : 괄호안에 있는 글자
    \((.+?)\) : 괄호만 선택 => $1 로 하면 글자만 남는다(괄호삭제)
    그림\d+-\d+ : 그림번호
        \(그림\d+-\d+\) : 괄호에 둘러쌓인 그림번호
        그림\d+\. : 마침표로 끝나는 그림번호
    ^.+: : 단락시작에 있는 글자(:) 선택
        ^\[.+\] : 대괄호로 시작되는 글자 선택
    \b유네.+?\b : 특정글자(유네)로 시작하는 단어 선택
    .+(?=:) : 특정기준 앞뒤에 있는 글자 선택
        (?<=:).+ : 뒤쪽에 나오는 모든 문자 선택
        (?<=:).  : 뒤쪽에 나오는 문자 1개 선택
        .(?=:)   : 앞쪽에 나오는 모든 문자 선택
    ((\d{1,3},)+)(?(1)\d{1,3}) : 천단위로 컴마로 구분된 숫자 선택
    ^\s+ : 불필요한 앞공백을 제거할 때
    \s+$ : 불필요한 뒷공백을 제거할 때
    ^\r{3,} : 불필요한 엔터공백을 제거할 때
    $2{$1} : 문장에서 단어 위치 바꾸기
    \p{No} : 원모양숫자 선택
    \p{so} : 그림문자 선택
    \p{Sm} : 산술기호 선택
    \p{Sc} : 통화기호 선택
    "|' : 따옴표만 선택
    \A...  문단 단어 첫 3자 선택
    ...\Z  문단 마지막 3자 선택
    ([A-Z])\w+ : 영단어 대문자로 시작되는 단어

1. 특정사이트 grabber
    ^http(?:s?):\/\/regex101\.com\/r\/([a-zA-Z0-9]{1,6})?$
    ^http(?:s?):\/\/regex101\.com\/r\/([a-zA-Z0-9]{1,6})?.*?$
2. trim
    ^[\s]*(.*?)[\s]*$
3. 패스워드 체크
    ^((?=\S*?[A-Z])(?=\S*?[a-z])(?=\S*?[0-9]).{6,})\S$

4. 이메일
^(?'Username'[-\w\d\.]+?)(?:\s+at\s+|\s*@\s*|\s*(?:[\[\]@]){3}\s*)(?'Domain'[-\w\d\.]*?)\s*(?:dot|\.|(?:[\[\]dot\.]){3,5})\s*(?'TLD'\w+)$

5. http
(https?:\/\/).*

6. 비디오 
\s*sources\s*:\s*\[(.*?)\]

7. http
((([A-Za-z]{3,9}:(?:\/\/)?)(?:[-;:&=\+\$,\w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=\+\$,\w]+@)[A-Za-z0-9.-]+)((?:\/[\+~%\/.\w-_]*)?\??(?:[-\+=&;%@.\w_]*)#?(?:[.\!\/\\w]*))?)

[가-힣] : 한글선택
~k|[\x{F900}-\X{FAFF}] : 한자선택
[\l\u] or [a-zA-Z] : 영어선택
\d or \d+ : 숫자선택
\d{3} : 3자리 숫자
\d(3,5) : 3~5자리 숫자
\p{No} : 원모양숫자 선택
\p{so} : 그림문자 선택
\p{Sm} : 산술기호 선택
\p{Sc} : 통화기호 선택
\(.+?\) : 괄호안의 숫자
(?<=\(),.+?(?=\)) : 괄호안에 있는 글자
그림\d+-\d+ : 그림번호
\(그림\d+-\d+\) : 괄호에 둘러쌓인 그림번호
그림\d+\. : 마침표로 끝나는 그림번호
"|' : 따옴표만 선택
[[:punct:]] : 구두점 선택
^.+: : 단락시작에 있는 글자 선택
^\[.+\] : 대괄호로 시작되는 글자 선택
\b유네.+?\b : 특정글자로 시작하는 단어 선택
.+(?=:) : 특정기준 앞뒤에 있는 글자 선택
(?<=:).+ : 뒤쪽에 나오는 모든 문자 선택
.(?=:) : 앞쪽에 나오는 모든 문자 선택
(?<=:). : 뒤쪽에 나오는 문자 1개 선택
((\d{1,3},)+)(?(1)\d{1,3}) : 천단위로 컴마로 구분된 숫자 선택
^\s+ : 불필요한 공백을 제거할 때